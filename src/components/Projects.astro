---
// Importer les tags depuis la collection
import { getCollection } from "astro:content";
const posts = await getCollection("works");

// Extraire tous les tags uniques des projets
const allTags = [
    "Tous",
    ...new Set(posts.flatMap((post: any) => post.data.tags || [])),
].sort();

// Définir les props
interface Props {
    showHeader?: boolean;
    showButton?: boolean;
    showFilters?: boolean;
    activeTag?: string;
}

const {
    showHeader = true,
    showButton = true,
    showFilters = false,
    activeTag = "Tous",
} = Astro.props;
---

<section class="projects-section" id="projects">
    <div class="projects-container">
        <!-- Le header avec le titre sera affiché uniquement si showHeader est true (par défaut) -->
        {
            Astro.props.showHeader !== false && (
                <div class="projects-header" data-aos="fade-up">
                    <h2 class="projects-title">Mes Projets</h2>
                    <div class="projects-divider" />
                    <p class="projects-subtitle">
                        Découvrez une sélection de mes travaux récents
                    </p>
                </div>
            )
        }

        {
            showFilters && (
                <div
                    class="filter-container"
                    data-aos="fade-up"
                    data-aos-delay="100"
                >
                    <div class="tag-filter">
                        {allTags.map((tag) => (
                            <a
                                href={
                                    tag === "Tous"
                                        ? "/works"
                                        : `/works?tag=${tag}`
                                }
                                class={`filter-tag ${tag === activeTag ? "active" : ""}`}
                                data-tag={tag}
                            >
                                {tag}
                            </a>
                        ))}
                    </div>
                </div>
            )
        }

        <div class="projects-grid">
            <slot />
        </div>

        {
            Astro.props.showButton !== false && (
                <div class="projects-button-container" data-aos="fade-up">
                    <a href="/works" class="projects-button">
                        <span>Voir tous mes projets</span>
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="20"
                            height="20"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                        >
                            <path d="M5 12h14" />
                            <path d="M12 5l7 7-7 7" />
                        </svg>
                    </a>
                </div>
            )
        }
    </div>

    <!-- Éléments décoratifs -->
    <div class="decorative-element circle1"></div>
    <div class="decorative-element circle2"></div>
    <div class="decorative-element square1"></div>
</section>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Sélection des éléments avec types explicites
        const dropdownButton = document.getElementById(
            "categoryDropdown",
        ) as HTMLButtonElement;
        const dropdownMenu = document.getElementById(
            "categoryOptions",
        ) as HTMLDivElement;
        const selectedText = document.querySelector(
            ".selected-category",
        ) as HTMLSpanElement;
        const filterOptions = document.querySelectorAll(".filter-option");
        const projectItems = document.querySelectorAll(".project-card");

        if (!dropdownButton || !dropdownMenu || !selectedText) {
            console.error("Éléments du menu déroulant non trouvés");
            return;
        }

        // Toggle du menu déroulant
        dropdownButton.addEventListener("click", () => {
            const isExpanded =
                dropdownButton.getAttribute("aria-expanded") === "true";
            dropdownButton.setAttribute(
                "aria-expanded",
                (!isExpanded).toString(),
            );

            if (!isExpanded) {
                dropdownMenu.classList.add("show");
                dropdownButton.classList.add("active");
            } else {
                dropdownMenu.classList.remove("show");
                dropdownButton.classList.remove("active");
            }
        });

        // Fermer le menu quand on clique à l'extérieur
        document.addEventListener("click", (e: MouseEvent) => {
            const target = e.target as HTMLElement;
            if (
                !dropdownButton.contains(target) &&
                !dropdownMenu.contains(target)
            ) {
                dropdownMenu.classList.remove("show");
                dropdownButton.classList.remove("active");
                dropdownButton.setAttribute("aria-expanded", "false");
            }
        });

        // Gérer la sélection des filtres
        filterOptions.forEach((option) => {
            option.addEventListener("click", () => {
                const filter = option.getAttribute("data-filter") || "all";

                // Mise à jour du texte sélectionné
                selectedText.textContent = option.textContent;

                // Mise à jour de la classe active
                filterOptions.forEach((opt) => opt.classList.remove("active"));
                option.classList.add("active");

                // Fermer le menu déroulant
                dropdownMenu.classList.remove("show");
                dropdownButton.classList.remove("active");
                dropdownButton.setAttribute("aria-expanded", "false"); // Filtrage des projets directement
                projectItems.forEach((item) => {
                    const cardElement = item as HTMLElement;

                    if (filter === "all") {
                        cardElement.style.display = "flex";
                        setTimeout(() => {
                            item.classList.remove("hidden-project");
                        }, 50);
                    } else {
                        // Vérifier d'abord data-categories puis data-category
                        const cardCategories =
                            cardElement.getAttribute("data-categories") ||
                            cardElement.getAttribute("data-category");

                        if (cardCategories && cardCategories.includes(filter)) {
                            cardElement.style.display = "flex";
                            setTimeout(() => {
                                item.classList.remove("hidden-project");
                            }, 50);
                        } else {
                            item.classList.add("hidden-project");
                            setTimeout(() => {
                                cardElement.style.display = "none";
                            }, 300);
                        }
                    }
                });
            });
        });
    });
</script>

<style>
    .projects-section {
        padding: 7rem 3rem 8rem;
        background-color: white;
        position: relative;
        overflow: hidden;
    }

    .projects-section::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 8px;
        background: linear-gradient(90deg, var(--blue-600), var(--blue-400));
        opacity: 0.7;
    }

    .projects-container {
        max-width: var(--max-width);
        margin: 0 auto;
        position: relative;
        z-index: 2;
    }

    .projects-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .projects-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: var(--blue-900);
        margin-bottom: 1rem;
        position: relative;
        display: inline-block;
    }

    .projects-title::after {
        content: "";
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 100%;
        height: 2px;
        background: linear-gradient(
            90deg,
            transparent,
            var(--blue-500),
            transparent
        );
        animation: shimmer 2.5s infinite;
    }

    .projects-divider {
        width: 80px;
        height: 4px;
        background: linear-gradient(90deg, var(--blue-600), var(--blue-400));
        margin: 0 auto 1.5rem;
        border-radius: 2px;
        box-shadow: 0 2px 8px rgba(var(--blue-rgb-500), 0.2);
    }
    .projects-subtitle {
        color: var(--blue-700);
        font-size: 1.2rem;
        max-width: 600px;
        margin: 0 auto;
        line-height: 1.6;
    }

    /* Filtre par tags */
    .filter-container {
        max-width: var(--max-width);
        margin: 0 auto 3rem;
        display: flex;
        justify-content: center;
    }

    .tag-filter {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.75rem;
    }

    .filter-tag {
        padding: 0.5rem 1.25rem;
        background-color: var(--blue-50);
        border: 2px solid var(--blue-100);
        border-radius: 30px;
        color: var(--blue-700);
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.25s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
        text-decoration: none;
    }

    .filter-tag:hover {
        background-color: var(--blue-100);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    .filter-tag.active {
        background: linear-gradient(to right, var(--blue-600), var(--blue-500));
        color: white;
        border-color: transparent;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    /* Filtres de projets */
    .projects-filter-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 3rem;
        position: relative;
        z-index: 10; /* S'assurer que le menu déroulant passe au-dessus des autres éléments */
    }

    /* Style du menu déroulant */
    .filter-dropdown {
        position: relative;
        width: 240px;
    }

    .dropdown-button {
        display: flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        padding: 1rem 1.5rem;
        background: white;
        border: 2px solid var(--blue-400);
        border-radius: 12px;
        font-size: 1rem;
        color: var(--blue-700);
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 10px rgba(var(--blue-rgb-400), 0.15);
    }

    .dropdown-button:hover {
        border-color: var(--blue-500);
        box-shadow: 0 6px 15px rgba(var(--blue-rgb-500), 0.2);
        transform: translateY(-2px);
    }

    .dropdown-button.active {
        border-color: var(--blue-600);
        box-shadow: 0 0 0 3px rgba(var(--blue-rgb-400), 0.3);
    }

    .dropdown-icon {
        transition: transform 0.3s ease;
        color: var(--blue-600);
    }

    .dropdown-button.active .dropdown-icon {
        transform: rotate(180deg);
    }

    .dropdown-menu {
        position: absolute;
        top: calc(100% + 10px);
        left: 0;
        right: 0;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(var(--blue-rgb-600), 0.18);
        max-height: 0;
        overflow: hidden;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s cubic-bezier(0.165, 0.84, 0.44, 1);
        border: 2px solid var(--blue-200);
        z-index: 20;
    }

    .dropdown-menu.show {
        max-height: 300px;
        opacity: 1;
        visibility: visible;
    }

    .filter-option {
        display: block;
        width: 100%;
        text-align: left;
        padding: 1rem 1.2rem;
        border: none;
        background: none;
        font-size: 0.95rem;
        color: var(--blue-700);
        cursor: pointer;
        transition: all 0.25s ease;
        border-bottom: 1px solid rgba(var(--blue-rgb-200), 0.2);
    }

    .filter-option:last-child {
        border-bottom: none;
    }

    .filter-option:hover {
        background-color: var(--blue-50);
        color: var(--blue-800);
        padding-left: 1.4rem;
    }

    .filter-option.active {
        background-color: var(--blue-100);
        color: var(--blue-700);
        font-weight: 600;
        padding-left: 1.5rem;
    }

    .filter-option.active::before {
        content: "";
        display: inline-block;
        width: 8px;
        height: 8px;
        background-color: var(--blue-600);
        border-radius: 50%;
        margin-right: 8px;
        vertical-align: middle;
        margin-top: -2px;
    }
    .projects-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 3.5rem;
        margin-top: 3rem;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    } /* Animation pour les projets filtrés */
    .project-card {
        display: flex;
        flex-direction: row;
        gap: 2.5rem;
        background: white;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(30, 64, 175, 0.08);
        border: 1px solid var(--blue-100);
        position: relative;
        transition:
            all 0.3s ease-in-out,
            transform 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        opacity: 1;
        transform: scale(1) translateY(0);
    }

    .project-card.card2 {
        flex-direction: row-reverse;
    }

    .project-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 20px 40px rgba(30, 64, 175, 0.12);
        border-color: var(--blue-200);
    }

    .hidden-project {
        opacity: 0;
        transform: scale(0.9) translateY(20px);
    }

    .project-content {
        flex: 1;
        padding: 2.5rem;
        display: flex;
        flex-direction: column;
        position: relative;
        z-index: 2; /* Au-dessus de l'effet de brillance */
        min-width: 0; /* Permet au flex item de rétrécir en dessous de sa taille de contenu */
    }

    .project-image {
        flex: 1;
        overflow: hidden;
        position: relative;
        min-height: 320px;
        background-color: var(--blue-50);
        min-width: 0; /* Permet au flex item de rétrécir en dessous de sa taille de contenu */
        display: flex; /* Assure que l'image est centrée */
        align-items: center;
        justify-content: center;
    }

    .project-img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        position: absolute;
        top: 0;
        left: 0;
        transition: transform 0.7s ease;
        transform-origin: center center;
        display: block; /* S'assurer que l'image est bien affichée */
        z-index: 1; /* Assurer que l'image est au-dessus des autres éléments */
    }

    .project-card:hover .project-img {
        transform: scale(1.08);
    }

    /* Éléments décoratifs */
    .decorative-element {
        position: absolute;
        opacity: 0.05;
        z-index: 1;
    }

    .circle1 {
        width: 300px;
        height: 300px;
        border-radius: 50%;
        background: var(--blue-500);
        top: 10%;
        right: -100px;
        animation: float 15s infinite alternate ease-in-out;
    }

    .circle2 {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        background: var(--blue-400);
        bottom: 5%;
        left: -50px;
        animation: float 18s infinite alternate-reverse ease-in-out;
    }

    .square1 {
        width: 150px;
        height: 150px;
        background: var(--blue-300);
        transform: rotate(45deg);
        top: 40%;
        left: 5%;
        animation: rotate 25s infinite linear;
    }

    @keyframes float {
        0% {
            transform: translateY(0) rotate(0deg);
        }
        100% {
            transform: translateY(40px) rotate(5deg);
        }
    }

    @keyframes rotate {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    @keyframes shimmer {
        0% {
            background-position: -100% 0;
        }
        100% {
            background-position: 200% 0;
        }
    }
    @media (max-width: 768px) {
        .projects-section {
            padding: 5rem 1.5rem 6rem;
        }

        .projects-title {
            font-size: 2rem;
        }

        .projects-subtitle {
            font-size: 1.1rem;
        }

        .tag-filter {
            gap: 0.5rem;
        }

        .filter-tag {
            padding: 0.4rem 1rem;
            font-size: 0.85rem;
        }

        .projects-grid {
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 2rem;
        }

        .projects-filter-container {
            width: 100%;
            padding: 0 1rem;
        }

        .filter-dropdown {
            width: 100%;
            max-width: 320px;
            margin: 0 auto;
        }

        .dropdown-menu {
            width: 100%;
            max-width: 320px;
        }

        .project-card,
        .project-card.card2 {
            flex-direction: column;
        }

        .project-image {
            order: -1;
            min-height: 240px;
            width: 100%;
            max-height: 300px; /* Limiter la hauteur sur mobile */
        }

        .project-content {
            width: 100%;
            padding: 2rem;
        }
    }

    @media (min-width: 1024px) {
        .projects-grid {
            grid-template-columns: 1fr;
            max-width: 1100px;
        }

        .project-card {
            width: 100%;
            height: auto; /* Permet à la carte de s'adapter à son contenu */
        }

        .project-content,
        .project-image {
            min-width: 0;
            flex-basis: 50%;
            max-width: 50%; /* S'assure que chaque élément prend bien 50% */
        }
    }
</style>

<style>
    .projects-button-container {
        display: flex;
        justify-content: center;
        margin-top: 3rem;
    }

    .projects-button {
        display: inline-flex;
        align-items: center;
        gap: 0.8rem;
        background: linear-gradient(to right, var(--blue-600), var(--blue-500));
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        text-decoration: none;
        box-shadow: 0 10px 25px rgba(var(--blue-rgb-500), 0.2);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .projects-button svg {
        transition: transform 0.3s ease;
    }

    .projects-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(var(--blue-rgb-500), 0.3);
    }

    .projects-button:hover svg {
        transform: translateX(4px);
    }
    @media (max-width: 768px) {
        .projects-button {
            width: 100%;
            max-width: 280px;
            justify-content: center;
        }
    }
</style>

<script>
    // Fonction pour gérer le filtrage dynamique sans rechargement de page
    document.addEventListener("DOMContentLoaded", function () {
        const filterTags = document.querySelectorAll(".filter-tag");

        filterTags.forEach((tag) => {
            tag.addEventListener("click", function (e) {
                e.preventDefault();

                const tagName = this.getAttribute("data-tag");
                const currentPath = window.location.pathname;
                let newUrl;

                if (tagName === "Tous") {
                    newUrl = currentPath;
                } else {
                    newUrl = `${currentPath}?tag=${tagName}`;
                }

                // Mettre à jour l'URL sans recharger la page
                window.history.pushState({}, "", newUrl);

                // Mettre à jour la classe active sur les tags
                filterTags.forEach((t) => t.classList.remove("active"));
                this.classList.add("active");

                // Mettre à jour l'affichage des projets
                updateProjectDisplay(tagName);
            });
        });

        // Gestionnaire d'événement pour le redimensionnement de la fenêtre
        window.addEventListener("resize", function () {
            // Récupérer le tag actif actuel
            const activeTag = document.querySelector(".filter-tag.active");
            if (activeTag) {
                updateProjectDisplay(activeTag.getAttribute("data-tag"));
            }
        });

        // Fonction pour mettre à jour l'affichage des projets selon le tag
        function updateProjectDisplay(tag) {
            const projectCards = document.querySelectorAll(".project-card");

            projectCards.forEach((card) => {
                const categories = card.getAttribute("data-categories");
                if (
                    tag === "Tous" ||
                    (categories && categories.includes(tag))
                ) {
                    // Utiliser "flex" au lieu de "block" pour maintenir l'alignement
                    const cardElement = card as HTMLElement;
                    cardElement.style.display = "flex";

                    // Restaurer la direction correcte selon la classe card1 ou card2
                    if (card.classList.contains("card2")) {
                        cardElement.style.flexDirection = "row-reverse";
                    } else {
                        cardElement.style.flexDirection = "row";
                    }

                    // Vérifier si on est sur mobile pour appliquer la direction colonne
                    if (window.innerWidth <= 768) {
                        cardElement.style.flexDirection = "column";
                    }

                    // Animation facultative pour l'apparition
                    cardElement.style.opacity = "0";
                    setTimeout(() => {
                        cardElement.style.opacity = "1";
                        cardElement.style.transition = "opacity 0.3s ease";
                    }, 10);
                } else {
                    (card as HTMLElement).style.display = "none";
                }
            });
        }
    });
</script>
