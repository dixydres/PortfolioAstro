---
import Basic from "./Basic.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Prose from "../components/Prose.astro";

interface Props {
    title: string;
    description?: string;
    pubDate: Date;
    updatedDate?: Date;
    heroImage?: string;
    tags?: string[];
    projectLink?: string;
}

const {
    title,
    description,
    pubDate,
    updatedDate,
    heroImage,
    tags = [],
    projectLink,
} = Astro.props;

// Pas besoin de traiter le chemin de l'image
const processedHeroImage = heroImage;
---

<Basic title={title} description={description}>    <a href={`${import.meta.env.BASE_URL}/works/`} class="back-to-top">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><line x1="19" y1="12" x2="5" y2="12"></line><polyline
                points="12 19 5 12 12 5"></polyline></svg
        >
        <span>Retour</span>
    </a>
    <article class="post">
        <div class="hero">
            {
                processedHeroImage && (
                    <img
                        src={processedHeroImage}
                        alt={title}
                        class="hero-image"
                    />
                )
            }
            <div class="hero-overlay"></div>
            <div class="hero-content">
                <h1 class="title">{title}</h1>
                <p class="description">{description}</p>
                <div class="post-meta">
                    <div class="date-container">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            width="16"
                            height="16"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            ><rect
                                x="3"
                                y="4"
                                width="18"
                                height="18"
                                rx="2"
                                ry="2"></rect><line
                                x1="16"
                                y1="2"
                                x2="16"
                                y2="6"></line><line x1="8" y1="2" x2="8" y2="6"
                            ></line><line x1="3" y1="10" x2="21" y2="10"
                            ></line></svg
                        >
                        <FormattedDate date={pubDate} />
                    </div>
                    {
                        updatedDate && (
                            <div class="updated-date">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                >
                                    {" "}
                                    <circle cx="12" cy="12" r="10" />
                                    <polyline points="12 6 12 12 16 14" />
                                </svg>
                                Mis à jour le{" "}
                                <FormattedDate date={updatedDate} />
                            </div>
                        )
                    }
                    {
                        projectLink && (
                            <a
                                href={projectLink}
                                target="_blank"
                                rel="noopener noreferrer"
                                class="project-link"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="16"
                                    height="16"
                                    viewBox="0 0 24 24"
                                    fill="none"
                                    stroke="currentColor"
                                    stroke-width="2"
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                >
                                    {" "}
                                    <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1-2-2h6" />
                                    <polyline points="15 3 21 3 21 9" />
                                    <line x1="10" y1="14" x2="21" y2="3" />
                                </svg>
                                Voir le projet
                            </a>
                        )
                    }
                </div>
                {
                    tags && (
                        <div class="post-tags">
                            {tags.map((tag) => (
                                <span class="tag">{tag}</span>
                            ))}
                        </div>
                    )
                }
            </div>
        </div>
        <Prose>
            <slot />
        </Prose>
        <div class="post-navigation">            <a href={`${import.meta.env.BASE_URL}/works/`} class="back-button">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    ><line x1="19" y1="12" x2="5" y2="12"></line><polyline
                        points="12 19 5 12 12 5"></polyline></svg
                >
                Retour aux projets
            </a>
        </div>
    </article>
</Basic>

<style>
    .post {
        padding: 0;
        margin-bottom: 4rem;
    }
    .hero {
        position: relative;
        height: 60vh;
        min-height: 400px;
        display: flex;
        align-items: flex-end;
        margin-bottom: 3rem;
        border-radius: 0;
        overflow: hidden;
        padding-top: 60px; /* Ajout d'un padding pour éviter la superposition avec la navbar */
    }

    .hero-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        z-index: 1;
    }

    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
            to bottom,
            rgba(0, 0, 0, 0.1) 0%,
            rgba(0, 0, 0, 0.8) 100%
        );
        z-index: 2;
    }

    .hero-content {
        position: relative;
        z-index: 3;
        width: 100%;
        padding: 3rem 5%;
        color: white;
        max-width: 1200px;
        margin: 0 auto;
    }

    .title {
        font-size: 3.5rem;
        font-weight: 800;
        margin-bottom: 1rem;
        line-height: 1.1;
    }

    .description {
        font-size: 1.2rem;
        max-width: 800px;
        margin-bottom: 1.5rem;
        line-height: 1.5;
        opacity: 0.9;
    }

    .post-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        align-items: center;
        font-size: 0.95rem;
    }

    .date-container,
    .updated-date,
    .project-link {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .project-link {
        padding: 0.5rem 1rem;
        background-color: #ffffff;
        color: #222;
        border-radius: 4px;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
    }

    .project-link:hover {
        background-color: #f0f0f0;
        transform: translateY(-2px);
    }

    .post-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.7rem;
    }

    .tag {
        background: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 30px;
        font-size: 0.85rem;
        backdrop-filter: blur(5px);
        transition: all 0.3s ease;
    }

    .tag:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .post-navigation {
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid #eee;
        text-align: center;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.8rem 1.5rem;
        background-color: #f5f5f5;
        color: #333;
        border-radius: 30px;
        font-weight: 600;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .back-button:hover {
        background-color: #e5e5e5;
        transform: translateY(-2px);
    }
    @media (max-width: 768px) {
        .hero {
            height: 50vh;
            min-height: 350px;
            padding-top: 80px; /* Augmenter le padding sur tablette */
        }

        .hero-content {
            padding: 2rem 5%;
        }

        .title {
            font-size: 2.5rem;
        }

        .description {
            font-size: 1rem;
            max-width: 100%;
        }

        .post-meta {
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .post-tags {
            margin-top: 0.5rem;
        }

        .carousel-button {
            @apply w-8 h-8;
        }

        .slider-image {
            @apply w-[220px] h-[220px];
        }
    }
    @media (max-width: 480px) {
        .hero {
            height: auto;
            min-height: 320px; /* Hauteur minimale plus grande pour éviter la superposition */
            padding-top: 70px; /* Ajustement du padding pour mobile */
        }

        .hero-content {
            padding: 1.5rem 5%;
        }

        .title {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
        }

        .description {
            font-size: 0.95rem;
            margin-bottom: 1rem;
        }

        .post-meta {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.8rem;
            margin-bottom: 0.5rem;
        }

        .post-tags {
            width: 100%;
        }

        .tag {
            font-size: 0.75rem;
            padding: 0.2rem 0.6rem;
        }

        .back-button {
            font-size: 0.9rem;
            padding: 0.6rem 1.2rem;
        }

        .carousel {
            aspect-ratio: 1/1;
        }

        .carousel-button {
            @apply w-7 h-7;
        }

        .slider-image {
            @apply w-[180px] h-[180px];
        }
    }
    .back-to-top {
        position: fixed;
        top: 20px;
        left: 20px;
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        background-color: var(--blue-600); /* Couleur bleue du site */
        color: white;
        border-radius: 30px;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.9rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        z-index: 100;
        transition: all 0.3s ease;
    }

    .back-to-top:hover {
        background-color: var(--blue-700);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .back-to-top svg {
        transition: transform 0.2s ease;
    }

    .back-to-top:hover svg {
        transform: translateX(-3px);
    }
    @media (max-width: 768px) {
        .back-to-top {
            top: 15px;
            left: 15px;
            padding: 6px 12px;
            z-index: 999; /* Augmenter le z-index pour s'assurer qu'il reste visible */
        }

        .back-to-top span {
            display: none;
        }
    }

    @media (max-width: 360px) {
        .back-to-top {
            top: 12px;
            left: 12px;
            padding: 5px 10px;
        }

        .back-to-top svg {
            width: 20px;
            height: 20px;
        }
    } /* Styles du slider en ligne */
    .image-slider {
        @apply w-full my-8;
    }

    .image-slider-container {
        @apply grid grid-cols-5 gap-4;
    }

    .slider-image {
        @apply aspect-square rounded-lg overflow-hidden;
    }

    .slider-image img {
        @apply w-full h-full object-cover transition-transform duration-300;
    }

    .slider-image:hover img {
        @apply scale-105;
    }

    @media (max-width: 1280px) {
        .image-slider-container {
            @apply grid-cols-3;
        }
    }

    @media (max-width: 768px) {
        .image-slider-container {
            @apply grid-cols-2;
        }
    }

    @media (max-width: 480px) {
        .image-slider-container {
            @apply grid-cols-1;
        }
    }

    /* Styles de la galerie d'images */
    /* Styles du carousel */
    .carousel {
        @apply relative w-full max-w-4xl mx-auto my-8 overflow-hidden rounded-xl;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        aspect-ratio: 16/9;
    }

    .carousel-container {
        @apply flex w-full h-full transition-transform duration-500 ease-in-out;
    }

    .carousel-slide {
        @apply flex-none w-full h-full relative;
    }

    .carousel-slide img {
        @apply w-full h-full object-cover;
    }

    .carousel-caption {
        @apply absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent text-white text-center;
        backdrop-filter: blur(4px);
    }

    .carousel-button {
        @apply absolute top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center;
        @apply bg-white/70 hover:bg-white/90 rounded-full cursor-pointer z-10;
        @apply transition-all duration-300 ease-in-out opacity-70 hover:opacity-100;
    }

    .carousel-button.prev {
        @apply left-4;
    }

    .carousel-button.next {
        @apply right-4;
    }

    .carousel-dots {
        @apply absolute bottom-4 left-0 right-0 flex justify-center gap-2 z-10;
    }

    .dot {
        @apply w-3 h-3 rounded-full bg-white/50 cursor-pointer transition-colors duration-300;
        @apply hover:bg-white/70 focus:outline-none focus:ring-2 focus:ring-white/50;
    }

    .dot.active {
        @apply bg-white;
    }

    @media (max-width: 768px) {
        .carousel {
            @apply my-4;
            aspect-ratio: 4/3;
        }

        .carousel-button {
            @apply w-8 h-8;
        }

        .carousel-caption {
            @apply p-3 text-sm;
        }
    }

    /* Styles du slider en ligne */
    .image-slider {
        @apply w-full overflow-x-auto my-8 pb-4;
        scroll-snap-type: x mandatory;
        -webkit-overflow-scrolling: touch;
    }

    .image-slider-container {
        @apply flex gap-4 w-max;
    }

    .slider-image {
        @apply w-[300px] h-[300px] rounded-lg overflow-hidden flex-none;
        scroll-snap-align: start;
    }

    .slider-image img {
        @apply w-full h-full object-cover transition-transform duration-300;
    }

    .slider-image:hover img {
        @apply scale-105;
    }

    @media (max-width: 768px) {
        .slider-image {
            @apply w-[250px] h-[250px];
        }
    }
</style>

<script is:inline>
    document.addEventListener("astro:page-load", () => {
        const carousel = document.querySelector(".carousel");
        if (!carousel) return;

        const container = carousel.querySelector(".carousel-container");
        const slides = carousel.querySelectorAll(".carousel-slide");
        const dotsContainer = carousel.querySelector(".carousel-dots");
        const prevBtn = carousel.querySelector(".prev");
        const nextBtn = carousel.querySelector(".next");

        if (!container || !dotsContainer || !slides.length) return;

        let currentIndex = 0;
        const totalSlides = slides.length;

        function updateSlide(index) {
            if (container) {
                container.style.transform = `translateX(-${index * 100}%)`;
            }

            if (dotsContainer) {
                dotsContainer.querySelectorAll(".dot").forEach((dot, i) => {
                    if (i === index) {
                        dot.classList.add("active");
                        dot.setAttribute("aria-current", "true");
                    } else {
                        dot.classList.remove("active");
                        dot.removeAttribute("aria-current");
                    }
                });
            }
        }
        function goToSlide(index) {
            currentIndex = ((index % totalSlides) + totalSlides) % totalSlides;
            updateSlide(currentIndex);
        }

        // Créer les points de navigation
        slides.forEach((_, index) => {
            const dot = document.createElement("button");
            dot.classList.add("dot");
            dot.setAttribute("aria-label", `Image ${index + 1}`);
            if (index === 0) {
                dot.classList.add("active");
                dot.setAttribute("aria-current", "true");
            }
            dot.addEventListener("click", () => goToSlide(index));
            dotsContainer.appendChild(dot);
        });

        // Navigation
        if (prevBtn)
            prevBtn.addEventListener("click", () =>
                goToSlide(currentIndex - 1),
            );
        if (nextBtn)
            nextBtn.addEventListener("click", () =>
                goToSlide(currentIndex + 1),
            );

        // Navigation tactile
        let touchStartX = 0;
        carousel.addEventListener(
            "touchstart",
            (e) => {
                touchStartX = e.touches[0].clientX;
            },
            { passive: true },
        );
        carousel.addEventListener(
            "touchend",
            (e) => {
                const touchEndX = e.changedTouches[0].clientX;
                const diff = touchStartX - touchEndX;

                if (Math.abs(diff) > 50) {
                    goToSlide(diff > 0 ? currentIndex + 1 : currentIndex - 1);
                }
            },
            { passive: true },
        ); // Navigation au clavier
        const handleKeydown = (e) => {
            if (e.key === "ArrowLeft") goToSlide(currentIndex - 1);
            else if (e.key === "ArrowRight") goToSlide(currentIndex + 1);
        };

        document.addEventListener("keydown", handleKeydown);

        // Autoplay
        let isPaused = false;
        const autoplayDelay = 5000;

        const autoplayInterval = setInterval(() => {
            if (!isPaused) goToSlide(currentIndex + 1);
        }, autoplayDelay); // Pause sur hover et focus
        const setPause = (pause) => {
            isPaused = pause;
        };

        carousel.addEventListener("mouseenter", () => setPause(true));
        carousel.addEventListener("mouseleave", () => setPause(false));
        carousel.addEventListener("focusin", () => setPause(true));
        carousel.addEventListener("focusout", () => setPause(false));

        // Nettoyage
        return () => {
            clearInterval(autoplayInterval);
            document.removeEventListener("keydown", handleKeydown);
        };
    });
</script>
